trigger: none
parameters:
- name: patchName
  type: string
  default: ''
  displayName: 'Solution Patch Name (if deploying patch)'
- name: dataFile
  type: string
  default: ''
  displayName: 'Data Migration File (if migrating data)'
- name: deployPortal
  type: boolean
  default: false
  displayName: 'Deploy Power Pages Portal?'
- name: branchName
  type: string
  default: 'main'
  displayName: 'Target Branch Name'
- name: dataFetchXml
  type: string
  default: ''
  displayName: 'FetchXML Query File Path'
- name: isUpsert
  type: boolean
  default: true
  displayName: 'Use Upsert for Data Import'
- name: isDelete
  type: boolean
  default: false
  displayName: 'Delete Records in Target'

variables:
- group: d365-deployment-vars

pool:
  vmImage: 'windows-latest'

stages:
- stage: PreChecks
  jobs:
  - job: ValidateInputs
    steps:
    - task: PowerPlatformToolInstaller@2
      inputs:
        DefaultVersion: true
        
    # Git setup
    - checkout: self
      persistCredentials: true
      
    - powershell: |
        git config --global user.email "azure-pipeline@yourorg.com"
        git config --global user.name "Azure Pipeline"
      displayName: 'Configure Git'

    # Data validation if provided
    - pwsh: |
        if ("${{ parameters.dataFile }}" -ne "") {
          Write-Host "Validating data file..."
          $conn = Get-PAConnection -ServiceUrl "$(sourceEnvironmentUrl)" -ClientId "$(clientId)" -ClientSecret "$(clientSecret)"
          $fetchXml = Get-Content "${{ parameters.dataFile }}" | Select-String -Pattern '<fetch.*?>' | Select -First 1
          $result = Invoke-PAFetchXmlQuery -FetchXml $fetchXml -CountOnly
          
          if ($result -gt 5000) {
            Write-Error "Data export would exceed 5000 records (Found: $result). Pipeline stopped."
            exit 1
          }
          Write-Host "Record count validation passed: $result records found"
        }
      displayName: 'Validate Data Export Size'
      condition: ne('${{ parameters.dataFile }}', '')

- stage: ProcessSolutionPatch
  condition: ne('${{ parameters.patchName }}', '')
  jobs:
  - job: HandlePatch
    steps:
    - task: PowerPlatformToolInstaller@2
      inputs:
        DefaultVersion: true

    # Export and unpack patch with Git integration
    - powershell: |
        # Create feature branch for solution
        $branchName = "solution/${{ parameters.patchName }}_$(Get-Date -Format 'yyyyMMdd_HHmmss')"
        git checkout -b $branchName

        pac auth create --url "$(sourceEnvironmentUrl)" --applicationId "$(clientId)" --clientSecret "$(clientSecret)" --tenant "$(tenantId)"
        
        # Export patch
        pac solution export --path "./${{ parameters.patchName }}.zip" --name "${{ parameters.patchName }}" --managed false
        
        # Unpack solution
        $solutionPath = "./solutions/${{ parameters.patchName }}"
        pac solution unpack --zipfile "./${{ parameters.patchName }}.zip" --folder "$solutionPath"
        
        # Run solution checker
        pac solution check --path "./${{ parameters.patchName }}.zip" --outputDirectory "./solution-checker-results" --errorLevel "High"
        
        # Pack as managed
        pac solution pack --folder "$solutionPath" --zipfile "./${{ parameters.patchName }}_managed.zip" --managed true

        # Git operations
        git add "$solutionPath/*"
        git commit -m "feat: Update solution ${{ parameters.patchName }} [skip ci]"
        
        # Try to push changes
        $pushResult = git push origin $branchName 2>&1
        if ($LASTEXITCODE -ne 0) {
            Write-Warning "Failed to push changes. Please resolve any conflicts and rerun the pipeline."
            Write-Warning "Error: $pushResult"
            exit 1
        }

        # Create PR
        $body = @{
            title = "Solution Update: ${{ parameters.patchName }}"
            sourceRefName = "refs/heads/$branchName"
            targetRefName = "refs/heads/${{ parameters.branchName }}"
            description = "Automated PR for solution update"
        } | ConvertTo-Json

        $url = "$(System.CollectionUri)$(System.TeamProject)/_apis/git/repositories/$(Build.Repository.Name)/pullrequests?api-version=6.0"
        $headers = @{
            'Content-Type' = 'application/json'
            'Authorization' = "Bearer $(System.AccessToken)"
        }

        Invoke-RestMethod -Uri $url -Method Post -Body $body -Headers $headers
      displayName: 'Process Solution Patch and Create PR'

    # Import to target
    - powershell: |
        pac auth create --url "$(targetEnvironmentUrl)" --applicationId "$(clientId)" --clientSecret "$(clientSecret)" --tenant "$(tenantId)"
        pac solution import --path "./${{ parameters.patchName }}_managed.zip" --async false
      displayName: 'Import Managed Solution to Target'

    # Publish solution checker results
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: './solution-checker-results'
        ArtifactName: 'solution-checker-report'
      displayName: 'Publish Solution Checker Results'

- stage: ProcessData
  condition: ne('${{ parameters.dataFile }}', '')
  jobs:
  - job: MigrateData
    steps:
    - task: PowerPlatformToolInstaller@2
      inputs:
        DefaultVersion: true

    - powershell: |
        pac auth create --url "$(sourceEnvironmentUrl)" --applicationId "$(clientId)" --clientSecret "$(clientSecret)" --tenant "$(tenantId)"
        pac data export --schemaFile "${{ parameters.dataFile }}" --dataFile "./exported-data.zip"
        
        pac auth create --url "$(targetEnvironmentUrl)" --applicationId "$(clientId)" --clientSecret "$(clientSecret)" --tenant "$(tenantId)"
        pac data import --dataFile "./exported-data.zip"
      displayName: 'Migrate Data'

- stage: DeployPortal
  condition: eq('${{ parameters.deployPortal }}', true)
  jobs:
  - job: PortalDeployment
    steps:
    - task: PowerPlatformToolInstaller@2
      inputs:
        DefaultVersion: true

    - powershell: |
        # Create feature branch for portal
        $portalBranchName = "portal/update_$(Get-Date -Format 'yyyyMMdd_HHmmss')"
        git checkout -b $portalBranchName

        # Download portal from source
        pac auth create --url "$(sourceEnvironmentUrl)" --applicationId "$(clientId)" --clientSecret "$(clientSecret)" --tenant "$(tenantId)"
        
        $portalPath = "./portals/website"
        pac paportal download --path $portalPath --excludeTables mspp_sitesetting,adx_sitesetting --overwrite --modelVersion 2
        
        # Run Portal Checker
        pac paportal check --path $portalPath --outputDirectory "./portal-checker-results"
        
        # Git operations for portal
        Write-Host "Committing portal changes..."
        git add "$portalPath/*"
        git commit -m "feat: Update portal content [skip ci]"
        
        # Try to push changes
        $pushResult = git push origin $portalBranchName 2>&1
        if ($LASTEXITCODE -ne 0) {
            Write-Warning "Failed to push portal changes. Merge conflicts detected."
            Write-Warning "Please resolve conflicts manually and rerun the pipeline."
            Write-Warning "Error: $pushResult"
            exit 1
        }

        # Create PR for portal changes
        $body = @{
            title = "Portal Update $(Get-Date -Format 'yyyy-MM-dd')"
            sourceRefName = "refs/heads/$portalBranchName"
            targetRefName = "refs/heads/${{ parameters.branchName }}"
            description = "Automated PR for portal update"
        } | ConvertTo-Json

        $url = "$(System.CollectionUri)$(System.TeamProject)/_apis/git/repositories/$(Build.Repository.Name)/pullrequests?api-version=6.0"
        $headers = @{
            'Content-Type' = 'application/json'
            'Authorization' = "Bearer $(System.AccessToken)"
        }

        Invoke-RestMethod -Uri $url -Method Post -Body $body -Headers $headers
        
        # If PR creation successful, upload to target
        pac auth create --url "$(targetEnvironmentUrl)" --applicationId "$(clientId)" --clientSecret "$(clientSecret)" --tenant "$(tenantId)"
        pac paportal upload --path $portalPath --modelVersion 2
      displayName: 'Deploy Power Pages Portal and Create PR'

    # Publish Portal Checker results
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: './portal-checker-results'
        ArtifactName: 'portal-checker-report'
      displayName: 'Publish Portal Checker Results'